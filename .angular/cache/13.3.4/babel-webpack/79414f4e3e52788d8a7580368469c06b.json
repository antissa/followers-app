{"ast":null,"code":"import { map, retry, throwError } from 'rxjs';\nimport { catchError } from 'rxjs';\nimport { AppError } from '../public/app-error';\nimport { NotFoundError } from '../public/not-found-errors';\nimport { BadInputError } from '../public/bad-input';\nimport { lastValueFrom } from 'rxjs';\nexport class DataService {\n  constructor(url, http) {\n    this.url = url;\n    this.http = http;\n  }\n\n  getAll() {\n    return this.http.get(this.url).pipe(map(response => response), catchError(this.HandleError));\n  }\n\n  add(resource) {\n    return this.http.post(this.url, JSON.stringify(resource)).pipe(map(response => response), catchError(this.HandleError));\n  }\n\n  update(resource) {\n    return this.http.patch(`${this.url}/${resource.id}`, JSON.stringify({\n      isRead: true\n    })).pipe(map(response => response), catchError(this.HandleError));\n  }\n\n  izbrisi(id) {\n    return lastValueFrom(this.http.delete(this.url + '/' + id).pipe(map(response => response), retry(5), catchError(this.HandleError)));\n  }\n\n  HandleError(error) {\n    if (error.status === 400) return throwError(() => new BadInputError(error)); //EXPECTED ERROR\n\n    if (error.status === 404) return throwError(() => new NotFoundError()); //EXPECTED ERROR\n\n    return throwError(() => new AppError(error)); //UNEXPECTED ERROR\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}